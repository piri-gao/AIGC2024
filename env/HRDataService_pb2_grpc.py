# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import env.HRDataService_pb2 as HRDataService__pb2


class HRDataServiceStub(object):
    """数据服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDataObservation = channel.unary_unary(
                '/HRDataService/GetDataObservation',
                request_serializer=HRDataService__pb2.ObservationRequest.SerializeToString,
                response_deserializer=HRDataService__pb2.ObservationResponse.FromString,
                )
        self.Step = channel.unary_unary(
                '/HRDataService/Step',
                request_serializer=HRDataService__pb2.CmdRequest.SerializeToString,
                response_deserializer=HRDataService__pb2.CmdResponse.FromString,
                )
        self.Terminal = channel.unary_unary(
                '/HRDataService/Terminal',
                request_serializer=HRDataService__pb2.ControlRequest.SerializeToString,
                response_deserializer=HRDataService__pb2.ControlResponse.FromString,
                )


class HRDataServiceServicer(object):
    """数据服务
    """

    def GetDataObservation(self, request, context):
        """态势数据接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """推进引擎, 发送指令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminal(self, request, context):
        """重置关闭引擎
        ControlRequest:  reset restart close
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HRDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDataObservation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataObservation,
                    request_deserializer=HRDataService__pb2.ObservationRequest.FromString,
                    response_serializer=HRDataService__pb2.ObservationResponse.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=HRDataService__pb2.CmdRequest.FromString,
                    response_serializer=HRDataService__pb2.CmdResponse.SerializeToString,
            ),
            'Terminal': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminal,
                    request_deserializer=HRDataService__pb2.ControlRequest.FromString,
                    response_serializer=HRDataService__pb2.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HRDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HRDataService(object):
    """数据服务
    """

    @staticmethod
    def GetDataObservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HRDataService/GetDataObservation',
            HRDataService__pb2.ObservationRequest.SerializeToString,
            HRDataService__pb2.ObservationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HRDataService/Step',
            HRDataService__pb2.CmdRequest.SerializeToString,
            HRDataService__pb2.CmdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HRDataService/Terminal',
            HRDataService__pb2.ControlRequest.SerializeToString,
            HRDataService__pb2.ControlResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
